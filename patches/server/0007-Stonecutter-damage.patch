From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sub-kek <subbkek@gmail.com>
Date: Mon, 30 Dec 2024 13:20:44 +0300
Subject: [PATCH] Stonecutter damage


diff --git a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
index 99a7e9eb75231c15bd8bb24fbb4e296bc9fdedff..e82a76f52fbcdd0ad9c4a7532cec6047eefc9d2f 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
@@ -97,9 +97,13 @@ public class CombatTracker {
                 String string = "death.attack." + damageSource.getMsgId();
                 Component component = ComponentUtils.wrapInSquareBrackets(Component.translatable(string + ".link")).withStyle(INTENTIONAL_GAME_DESIGN_STYLE);
                 return Component.translatable(string + ".message", this.mob.getDisplayName(), component);
-            } else {
-                return damageSource.getLocalizedDeathMessage(this.mob);
+            // Etheria start
+            } else if (damageSource.isStonecutter()) {
+                return damageSource.getLocalizedDeathMessage(org.subkek.etheria.EtheriaConfig.INSTANCE.getStonecutterDeathMsg(), this.mob);
             }
+            // Etheria start
+
+            return damageSource.getLocalizedDeathMessage(this.mob); // Etheria
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/damagesource/DamageSource.java b/src/main/java/net/minecraft/world/damagesource/DamageSource.java
index 625074245ab8abff67f9a7338869fb46f080affa..300baad114626751f9672366cb38bfeae594eeb6 100644
--- a/src/main/java/net/minecraft/world/damagesource/DamageSource.java
+++ b/src/main/java/net/minecraft/world/damagesource/DamageSource.java
@@ -117,6 +117,7 @@ public class DamageSource {
         damageSource.sweep = this.isSweep();
         damageSource.poison = this.isPoison();
         damageSource.melting = this.isMelting();
+        damageSource.stonecutter = this.isStonecutter(); // Etheria
         return damageSource;
     }
     // CraftBukkit end
@@ -285,4 +286,18 @@ public class DamageSource {
         return this;
     }
     // Paper end - add critical damage API
+
+    // Etheria start
+    @lombok.Getter
+    private boolean stonecutter;
+
+    public DamageSource stonecutter() {
+        return this.stonecutter(true);
+    }
+
+    public DamageSource stonecutter(boolean stonecutter) {
+        this.stonecutter = true;
+        return this;
+    }
+    // Etheria end
 }
diff --git a/src/main/java/net/minecraft/world/damagesource/DamageSources.java b/src/main/java/net/minecraft/world/damagesource/DamageSources.java
index be87cb3cfa15a7d889118cdc4b87232e30749023..6d4636623aed4e6cf4d6e512f6812da39ba7b189 100644
--- a/src/main/java/net/minecraft/world/damagesource/DamageSources.java
+++ b/src/main/java/net/minecraft/world/damagesource/DamageSources.java
@@ -46,11 +46,13 @@ public class DamageSources {
     // CraftBukkit start
     private final DamageSource melting;
     private final DamageSource poison;
+    private final DamageSource stonecutter; // Etheria
 
     public DamageSources(RegistryAccess registryManager) {
         this.damageTypes = registryManager.lookupOrThrow(Registries.DAMAGE_TYPE);
         this.melting = this.source(DamageTypes.ON_FIRE).melting();
         this.poison = this.source(DamageTypes.MAGIC).poison();
+        this.stonecutter = this.source(DamageTypes.MAGIC).stonecutter();
         // CraftBukkit end
         this.inFire = this.source(DamageTypes.IN_FIRE);
         this.campfire = this.source(DamageTypes.CAMPFIRE);
@@ -298,4 +300,10 @@ public class DamageSources {
     public DamageSource mace(Entity attacker) {
         return this.source(DamageTypes.MACE_SMASH, attacker);
     }
+
+    // Etheria start
+    public DamageSource stonecutter() {
+        return this.stonecutter;
+    }
+    // Etheria end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index c156b2197d02d4b2b96f3b918f1c5f817b4fc086..040797bfe9c861c3333afaf876b49838761fb26f 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4707,7 +4707,6 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
 
     // CraftBukkit start
     private final CommandSource commandSource = new CommandSource() {
-
         @Override
         public void sendSystemMessage(Component message) {
         }
diff --git a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
index f1366aea49206afcd64bf058ee673d6a562315c5..f3654a79ea53d3e33e47f3dc9afeb7f9be63655f 100644
--- a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
@@ -93,4 +93,15 @@ public class StonecutterBlock extends Block {
     protected boolean isPathfindable(BlockState state, PathComputationType type) {
         return false;
     }
+
+    // Etheria start
+    @Override
+    public void stepOn(Level level, BlockPos pos, BlockState state, net.minecraft.world.entity.Entity entity) {
+        float damage = org.subkek.etheria.EtheriaConfig.INSTANCE.getStonecutterDamage();
+        if (damage > 0f && entity instanceof net.minecraft.world.entity.LivingEntity) {
+            entity.hurtServer((net.minecraft.server.level.ServerLevel) level, entity.damageSources().stonecutter().directBlock(level, pos), damage);
+        }
+        super.stepOn(level, pos, state, entity);
+    }
+    // Etheria end
 }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index c84fd369d92932903c76bb2012602617d3e2d213..6acfd6b2ca7304217161a51b7cfcefe91988f9f8 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -491,7 +491,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
             return PathType.TRAPDOOR;
         } else if (blockState.is(Blocks.POWDER_SNOW)) {
             return PathType.POWDER_SNOW;
-        } else if (blockState.is(Blocks.CACTUS) || blockState.is(Blocks.SWEET_BERRY_BUSH)) {
+        } else if (blockState.is(Blocks.CACTUS) || blockState.is(Blocks.SWEET_BERRY_BUSH) || blockState.is(Blocks.STONECUTTER)) {
             return PathType.DAMAGE_OTHER;
         } else if (blockState.is(Blocks.HONEY_BLOCK)) {
             return PathType.STICKY_HONEY;
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index e37aaf77f94b97b736cc20ef070cefdff0400188..5695e1da36aa5a290d4daae49d24449624a6889a 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1131,7 +1131,7 @@ public class CraftEventFactory {
             return CraftEventFactory.callEntityDamageEvent(source.getDirectBlock(), source.getDirectBlockState(), entity, DamageCause.LAVA, bukkitDamageSource, modifiers, modifierFunctions, cancelled);
         } else if (source.getDirectBlock() != null) {
             DamageCause cause;
-            if (source.is(DamageTypes.CACTUS) || source.is(DamageTypes.SWEET_BERRY_BUSH) || source.is(DamageTypes.STALAGMITE) || source.is(DamageTypes.FALLING_STALACTITE) || source.is(DamageTypes.FALLING_ANVIL)) {
+            if (source.is(DamageTypes.CACTUS) || source.is(DamageTypes.SWEET_BERRY_BUSH) || source.is(DamageTypes.STALAGMITE) || source.is(DamageTypes.FALLING_STALACTITE) || source.is(DamageTypes.FALLING_ANVIL) || source.isStonecutter()) { // Etheria
                 cause = DamageCause.CONTACT;
             } else if (source.is(DamageTypes.HOT_FLOOR)) {
                 cause = DamageCause.HOT_FLOOR;
diff --git a/src/main/java/org/subkek/etheria/EtheriaConfig.java b/src/main/java/org/subkek/etheria/EtheriaConfig.java
index ff5d7cad474abefc462270c2461a3d2a81892f5a..a0ab1d3292c8ad4698ceb57254f8b965eab3e044 100644
--- a/src/main/java/org/subkek/etheria/EtheriaConfig.java
+++ b/src/main/java/org/subkek/etheria/EtheriaConfig.java
@@ -131,4 +131,14 @@ public enum EtheriaConfig {
     //  private void someSettings() { # Configurator methods must be ends with Settings
     //    option = getBoolean("some.option", option, "Good comment");
     //  }
+
+    private String stonecutterDeathMsg = "<player> has sawed themself in half";
+    private void deathSettings() {
+        stonecutterDeathMsg = getString("messages.death.stonecutter", stonecutterDeathMsg);
+    }
+
+    private float stonecutterDamage = 0.f;
+    private void blockSettings() {
+        stonecutterDamage = (float) getDouble("blocks.stonecutter.damage", stonecutterDamage);
+    }
 }
