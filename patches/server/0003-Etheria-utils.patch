From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sub-kek <subbkek@gmail.com>
Date: Sun, 8 Dec 2024 19:27:44 +0300
Subject: [PATCH] Etheria utils


diff --git a/build.gradle.kts b/build.gradle.kts
index b95de063b91980890de5008d9e230dd4e7e5d884..a23b058291ca9dd3357e0a47d91480309f6eb19c 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -88,6 +88,11 @@ dependencies {
     implementation("me.lucko:spark-api:0.1-20240720.200737-2")
     implementation("me.lucko:spark-paper:1.10.119-SNAPSHOT")
     // Paper end - spark
+
+    // Etheria start - utils
+    compileOnly("org.projectlombok:lombok:1.18.36")
+    annotationProcessor("org.projectlombok:lombok:1.18.36")
+    // Etheria end - utils
 }
 
 paperweight {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d62f7375394409a278bc565c8263506c598ceeba..adaf480bfd5a168abfc3c9ba0fe401875f9a3f61 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -238,6 +238,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
+        org.subkek.etheria.EtheriaConfig.INSTANCE.init(); // Etheria - utils
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/org/subkek/etheria/EtheriaConfig.java b/src/main/java/org/subkek/etheria/EtheriaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..f529c8b456753a87746fa6dd461bcf440c28fe96
--- /dev/null
+++ b/src/main/java/org/subkek/etheria/EtheriaConfig.java
@@ -0,0 +1,139 @@
+package org.subkek.etheria;
+
+import lombok.AccessLevel;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.simpleyaml.configuration.comments.CommentType;
+import org.simpleyaml.configuration.file.YamlFile;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+
+
+@Getter
+@RequiredArgsConstructor
+@SuppressWarnings("unused")
+public enum EtheriaConfig {
+    INSTANCE(new File("etheria.yml"));
+
+    @Getter(AccessLevel.NONE)
+    private final YamlFile yaml = new YamlFile();
+    @Getter(AccessLevel.NONE)
+    private final File configFile;
+    private String configVersion;
+
+    public void init() {
+        if (configFile.exists()) {
+            try {
+                yaml.load(configFile);
+            } catch (IOException e) {
+                EtheriaLogger.error("Error loading file: ", e);
+            }
+        }
+
+        configVersion = getString("info.version", "1.0", "Don't change this value");
+        setComment("info",
+                "Etheria Configuration",
+                "Join our Discord for support: https://discord.gg/eRvwvmEXWz");
+
+        for (Method method : this.getClass().getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers()) &&
+                    method.getReturnType().equals(Void.TYPE) &&
+                    method.getName().endsWith("Settings")
+            ) {
+                try {
+                    method.invoke(this);
+                } catch (Throwable e) {
+                    EtheriaLogger.error("Failed to load configuration option from {0}", e, method.getName());
+                }
+            }
+        }
+
+        save();
+    }
+
+    public void save() {
+        try {
+            yaml.save(configFile);
+        } catch (IOException e) {
+            EtheriaLogger.error("Error saving file: ", e);
+        }
+    }
+
+    private void setComment(String key, String... comment) {
+        if (yaml.contains(key) && comment.length > 0) {
+            yaml.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private void ensureDefault(String key, Object defaultValue, String... comment) {
+        if (!yaml.contains(key))
+            yaml.set(key, defaultValue);
+
+        setComment(key, comment);
+    }
+
+    private boolean getBoolean(String key, boolean defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return yaml.getBoolean(key, defaultValue);
+    }
+
+    private int getInt(String key, int defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return yaml.getInt(key, defaultValue);
+    }
+
+    private double getDouble(String key, double defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return yaml.getDouble(key, defaultValue);
+    }
+
+    private String getString(String key, String defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return yaml.getString(key, defaultValue);
+    }
+
+    private List<String> getStringList(String key, List<String> defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return yaml.getStringList(key);
+    }
+
+    private void migrateLog(String message, Object... format) {
+        message = Formatter.format("[Configuration] {0}", message);
+        EtheriaLogger.info(message, format);
+    }
+
+    private void setConfigVersion(String version) {
+        yaml.set("info.version", version);
+        configVersion = version;
+    }
+
+    private void removeValue(String key) {
+        if (yaml.contains(key)) {
+            yaml.remove(key);
+            migrateLog("Successfully removed value {0}", key);
+            return;
+        }
+        migrateLog("Not found value {0} to remove", key);
+    }
+
+    private void migrateValue(String key, String newKey) {
+        if (yaml.contains(key)) {
+            Object value = yaml.get(key);
+            yaml.remove(key);
+            yaml.set(newKey, value);
+            migrateLog("Successfully migrated value {0} to {1}", key, newKey);
+            return;
+        }
+        migrateLog("Not found value {0} to migrate to {1}", key, newKey);
+    }
+
+    //  private boolean option = false // current value is default // Must be accessed with getOption()
+    //
+    //  private void someSettings() { // Configurator methods must be ends with Settings
+    //    option = getBoolean("some.option", option, "Good comment")
+    //  }
+}
diff --git a/src/main/java/org/subkek/etheria/EtheriaLogger.java b/src/main/java/org/subkek/etheria/EtheriaLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..ad3153566698b1f5f483a8e1c5ef9de2e62ef12d
--- /dev/null
+++ b/src/main/java/org/subkek/etheria/EtheriaLogger.java
@@ -0,0 +1,38 @@
+package org.subkek.etheria;
+
+import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public enum EtheriaLogger {
+    INSTANCE;
+
+    private final Logger logger;
+
+    EtheriaLogger() {
+        this.logger = new LoggerImpl();
+    }
+
+    public static void info(@NotNull String message, Object... format) {
+        INSTANCE.logger.log(Level.INFO, Formatter.format(message, format));
+    }
+
+    public static void error(@NotNull String message, @Nullable Throwable e, Object... format) {
+        INSTANCE.logger.log(Level.SEVERE, Formatter.format(message, format), e);
+    }
+
+    public static void error(@NotNull String message, Object... format) {
+        error(message, null, format);
+    }
+
+    private static class LoggerImpl extends Logger {
+        protected LoggerImpl() {
+            super("Etheria", null);
+            setParent(Bukkit.getLogger());
+            setLevel(Level.ALL);
+        }
+    }
+}
diff --git a/src/main/java/org/subkek/etheria/Formatter.java b/src/main/java/org/subkek/etheria/Formatter.java
new file mode 100644
index 0000000000000000000000000000000000000000..85ff804d99e94f896cf23850e0fb9c319f7ddee2
--- /dev/null
+++ b/src/main/java/org/subkek/etheria/Formatter.java
@@ -0,0 +1,10 @@
+package org.subkek.etheria;
+
+public class Formatter {
+    public static String format(String str, Object... replace) {
+        for (int i = 0; i < replace.length; i++) {
+            str = str.replace("{%d}".formatted(i), replace[i].toString());
+        }
+        return str;
+    }
+}
